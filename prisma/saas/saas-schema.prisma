// SaaS-ready Prisma schema for multi-tenant (company-aware) applications
// This schema is designed to isolate data per company (tenant) and support a super admin role

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  BACKEND
  RM
  MST
  ACCOUNTS
}

enum TicketFeedback {
  POSITIVE
  NEUTRAL
  NEGATIVE
  PENDING
}

enum PerformanceTrend {
  UP
  DOWN
  STABLE
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

model Company {
  id          String   @id @default(uuid())
  name        String
  industry    String?
  createdAt   DateTime @default(now())
  users       User[]
  clients     Client[]
  rateCards   RateCard[]
  quotations  Quotation[]
  tickets     Ticket[]
}

model User {
  id                   String           @id @default(uuid())
  displayId            String?          @unique
  name                 String
  email                String           @unique
  password             String
  mobile               String           @unique
  role                 Role
  createdAt            DateTime         @default(now())
  tickets              Ticket[]
  department           String?
  specialization       String?
  status               Status           @default(ACTIVE)
  leadsAssigned        Int              @default(0)
  leadsActive          Int              @default(0)
  leadsClosed          Int              @default(0)
  conversionRate       Float            @default(0.0)
  performanceTrend     PerformanceTrend @default(STABLE)
  joinedDate           DateTime         @default(now())
  avatar               String?
  initials             String?
  activeTickets        Int              @default(0)
  rating               Float            @default(0.0)
  completedTickets     Int              @default(0)
  authoredComments     Comment[]        @relation("UserAuthoredComments")
  notifications        Notification[]   @relation("UserNotifications")
  resetPasswordToken   String?          @unique
  resetPasswordExpires DateTime?
  companyId            String?
  company              Company?         @relation(fields: [companyId], references: [id])

  @@index([status])
  @@index([role])
  @@index([department])
  @@index([createdAt])
  @@index([companyId])
}

model Client {
  id              String      @id @default(uuid())
  displayId       String?     @unique
  name            String
  type            String
  totalBranches   Int
  contactPerson   String
  contactEmail    String?
  contactPhone    String
  contractStatus  String
  lastServiceDate DateTime
  avatar          String?
  companyId       String
  company         Company     @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model RateCard {
  id          String   @id @default(uuid())
  srNo        Int
  description String
  unit        String
  rate        Float
  bankName    String
  uploadedAt  DateTime @default(now())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])

  @@index([description])
  @@index([companyId])
}

model Quotation {
  id              String    @id @default(uuid())
  displayId       String?   @unique
  quoteNo         String    @unique
  name            String
  pdfUrl          String?
  clientId        String
  client          Client    @relation(fields: [clientId], references: [id])
  createdAt       DateTime  @default(now())
  expenses        Expense[]
  rateCardDetails Json?
  ticketId        String?
  ticket          Ticket?   @relation(fields: [ticketId], references: [id])
  subtotal        Float
  gst             Float
  grandTotal      Float
  salesType       String
  validUntil      DateTime?
  expectedExpense Float?    @default(0)
  companyId       String
  company         Company   @relation(fields: [companyId], references: [id])

  @@index([clientId])
  @@index([ticketId])
  @@index([createdAt])
  @@index([companyId])
}

model Expense {
  id            String          @id @default(uuid())
  displayId     String?         @unique
  customId      String          @unique
  amount        Float
  description   String
  category      ExpenseCategory
  requester     String
  paymentType   PaymentType
  quotationId   String?
  quotation     Quotation?      @relation(fields: [quotationId], references: [id])
  ticketId      String?
  ticket        Ticket?         @relation(fields: [ticketId], references: [id])
  createdAt     DateTime        @default(now())
  pdfUrl        String?
  screenshotUrl String? // For online payment screenshots
  approvalName  String? // For offline payment approvals
  companyId     String
  company       Company         @relation(fields: [companyId], references: [id])

  @@index([ticketId])
  @@index([quotationId])
  @@index([createdAt])
  @@index([companyId])
}

model Ticket {
  id                   String         @id @default(uuid())
  ticketId             String         @unique
  title                String
  branch               String
  priority             String
  dueDate              DateTime?
  scheduledDate        DateTime?
  completedDate        DateTime?
  createdAt            DateTime       @default(now())
  description          String
  holdReason           String?
  due                  Int?
  paid                 Boolean?       @default(false)
  assigneeId           String
  assignee             User           @relation(fields: [assigneeId], references: [id])
  status               TicketStatus   @default(new)
  workStageId          String?        @unique
  workStage            WorkStage?     @relation(name: "TicketToWorkStage", fields: [workStageId], references: [id])
  clientId             String
  client               Client         @relation(fields: [clientId], references: [id])
  expenses             Expense[]
  Quotation            Quotation[]
  comments             Comment[]
  approvedByAccountant String?
  approvalNote         String?
  notifications        Notification[] @relation("TicketNotifications")
  companyId            String
  company              Company        @relation(fields: [companyId], references: [id])

  feedback       TicketFeedback? @default(PENDING)
  photosUploaded Boolean         @default(false)

  @@index([status])
  @@index([assigneeId])
  @@index([clientId])
  @@index([createdAt])
  @@index([completedDate])
  @@index([companyId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation("UserAuthoredComments", fields: [userId], references: [id])
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])

  @@index([ticketId])
  @@index([userId])
  @@index([companyId])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String
  ticketId  String?
  ticket    Ticket?          @relation("TicketNotifications", fields: [ticketId], references: [id], onDelete: Cascade)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  actionUrl String?
  companyId String
  company   Company          @relation(fields: [companyId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([companyId])
}

model WorkStage {
  id           String   @id @default(uuid())
  stateName    String
  adminName    String
  clientName   String
  siteName     String
  quoteNo      String
  dateReceived DateTime
  quoteTaxable Float
  quoteAmount  Float
  workStatus   String
  approval     String
  poStatus     Boolean  @default(false)
  poNumber     String
  jcrStatus    Boolean  @default(false)
  agentName    String
  ticketId     String?
  ticket       Ticket?  @relation(name: "TicketToWorkStage")
  jcrFilePath  String? // New field
  poFilePath   String? // New field
  companyId    String
  company      Company  @relation(fields: [companyId], references: [id])

  @@unique([ticketId])
  @@index([companyId])
}
