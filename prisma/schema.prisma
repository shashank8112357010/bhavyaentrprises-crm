generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BACKEND
  RM
  MST
  ACCOUNTS
}

enum PerformanceTrend {
  UP
  DOWN
  STABLE
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

model User {
  id               String           @id @default(uuid())
  name             String
  email            String           @unique
  password         String
  mobile           String           @unique
  role             Role
  createdAt        DateTime         @default(now())
  tickets          Ticket[] // relation
  department       String?
  specialization   String?
  status           Status           @default(ACTIVE)
  leadsAssigned    Int              @default(0)
  leadsActive      Int              @default(0)
  leadsClosed      Int              @default(0)
  conversionRate   Float            @default(0.0)
  performanceTrend PerformanceTrend @default(STABLE)
  joinedDate       DateTime         @default(now())
  avatar           String?
  initials         String?
  activeTickets    Int              @default(0)
  rating           Float            @default(0.0)
  completedTickets Int              @default(0)
}

model Client {
  id              String   @id @default(uuid())
  name            String
  type            String // e.g., "Bank"
  totalBranches   Int
  contactPerson   String
  contactEmail    String?
  contactPhone    String
  contractStatus  String // e.g., "Active"
  lastServiceDate DateTime
  avatar          String? // logo path or URL
  initials        String
  gstn            String? // <-- New field

  tickets   Ticket[] // one-to-many relationship
  Quotation Quotation[]
}

enum ExpenseCategory {
  LABOR
  TRANSPORT
  MATERIAL
  OTHER
}

model Expense {
  id          String          @id @default(uuid())
  amount      Float
  description String
  category    ExpenseCategory
  quotationId String?
  quotation   Quotation?      @relation(fields: [quotationId], references: [id])
  ticketId    String?
  ticket      Ticket?         @relation(fields: [ticketId], references: [id])
  createdAt   DateTime        @default(now())
}

model RateCard {
  id          String   @id @default(uuid())
  srNo        Int
  description String
  unit        String
  rate        Float
  bankName    String
  bankRcNo    String
  uploadedAt  DateTime @default(now())
}

model Quotation {
  id        String    @id @default(uuid())
  name      String
  pdfUrl    String // Stored file path or external URL
  clientId  String
  client    Client    @relation(fields: [clientId], references: [id])
  createdAt DateTime  @default(now())
  expenses  Expense[] // relation to expenses
  ticketId  String? // optional link to a ticket
  ticket    Ticket?   @relation(fields: [ticketId], references: [id])
}

model Ticket {
  id            String    @id @default(uuid())
  title         String
  branch        String
  priority      String
  dueDate       DateTime?
  scheduledDate DateTime?
  completedDate DateTime?
  createdAt     DateTime  @default(now())
  description   String
  comments      Int?
  holdReason    String?

  assigneeId String
  assignee   User         @relation(fields: [assigneeId], references: [id])
  status     TicketStatus @default(new)

  workStageId String?     @unique
  workStage   WorkStage?  @relation(name: "TicketToWorkStage", fields: [workStageId], references: [id])
  clientId    String
  client      Client      @relation(fields: [clientId], references: [id])
  expenses    Expense[] // <-- opposite side of Expense.ticket
  Quotation   Quotation[]
}

enum TicketStatus {
  new
  inProgress
  onHold
  completed
  billing_pending
  billing_completed
}

model WorkStage {
  id           String   @id @default(uuid())
  stateName    String
  adminName    String
  clientName   String
  siteName     String
  quoteNo      String
  dateReceived DateTime
  quoteTaxable Float
  quoteAmount  Float
  workStatus   String
  approval     String
  poStatus     String
  poNumber     String
  jcrStatus    String
  agentName    String

  ticketId String?
  ticket   Ticket? @relation(name: "TicketToWorkStage")

  @@unique([ticketId])
}
