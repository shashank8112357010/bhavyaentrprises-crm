generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BACKEND
  RM
  MST
  ACCOUNTS
}

enum PerformanceTrend {
  UP
  DOWN
  STABLE
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

model User {
  id                   String           @id @default(uuid())
  name                 String
  email                String           @unique
  password             String
  mobile               String           @unique
  role                 Role
  createdAt            DateTime         @default(now())
  tickets              Ticket[] // relation
  department           String?
  specialization       String?
  status               Status           @default(ACTIVE)
  leadsAssigned        Int              @default(0)
  leadsActive          Int              @default(0)
  leadsClosed          Int              @default(0)
  conversionRate       Float            @default(0.0)
  performanceTrend     PerformanceTrend @default(STABLE)
  joinedDate           DateTime         @default(now())
  avatar               String?
  initials             String?
  activeTickets        Int              @default(0)
  rating               Float            @default(0.0)
  completedTickets     Int              @default(0)
  authoredComments     Comment[]        @relation("UserAuthoredComments")
  resetPasswordToken   String?          @unique
  resetPasswordExpires DateTime?
}

model RateCard {
  id          String   @id @default(uuid())
  srNo        Int
  description String
  unit        String
  rate        Float
  bankName    String
  bankRcNo    String
  uploadedAt  DateTime @default(now())
}

model Quotation {
  id              String    @id @default(uuid())
  name            String
  pdfUrl          String
  clientId        String
  client          Client    @relation(fields: [clientId], references: [id])
  createdAt       DateTime  @default(now())
  expenses        Expense[]
  rateCardDetails Json? // This will store an array of objects with rateCardId, quantity, and gstType
  ticketId        String?
  ticket          Ticket?   @relation(fields: [ticketId], references: [id])
  subtotal        Float
  gst             Float
  grandTotal      Float
}

model Client {
  id              String      @id @default(uuid())
  name            String
  type            String
  totalBranches   Int
  contactPerson   String
  contactEmail    String?
  contactPhone    String
  contractStatus  String
  lastServiceDate DateTime
  avatar          String?
  initials        String
  gstn            String?
  tickets         Ticket[]
  Quotation       Quotation[]
}

model Expense {
  id          String          @id @default(uuid())
  customId    String          @unique
  amount      Float
  description String
  category    ExpenseCategory
  requester   String
  paymentType PaymentType
  quotationId String?
  quotation   Quotation?      @relation(fields: [quotationId], references: [id])
  ticketId    String?
  ticket      Ticket?         @relation(fields: [ticketId], references: [id])
  createdAt   DateTime        @default(now())
  pdfUrl      String?
}

model Ticket {
  id            String       @id @default(uuid())
  ticketId      String       @unique
  title         String
  branch        String
  priority      String
  dueDate       DateTime?
  scheduledDate DateTime?
  completedDate DateTime?
  createdAt     DateTime     @default(now())
  description   String
  holdReason    String?
  due           Int?
  paid          Boolean?     @default(false)
  assigneeId    String
  assignee      User         @relation(fields: [assigneeId], references: [id])
  status        TicketStatus @default(new)
  workStageId   String?      @unique
  workStage     WorkStage?   @relation(name: "TicketToWorkStage", fields: [workStageId], references: [id])
  clientId      String
  client        Client       @relation(fields: [clientId], references: [id])
  expenses      Expense[]
  Quotation     Quotation[]
  comments      Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation("UserAuthoredComments", fields: [userId], references: [id])

  @@index([ticketId])
  @@index([userId])
}

enum ExpenseCategory {
  LABOR
  TRANSPORT
  MATERIAL
  OTHER
}

enum PaymentType {
  VCASH
  ONLINE
  REST
}

enum TicketStatus {
  new
  inProgress
  onHold
  completed
  billing_pending
  billing_completed
}

model WorkStage {
  id           String   @id @default(uuid())
  stateName    String
  adminName    String
  clientName   String
  siteName     String
  quoteNo      String
  dateReceived DateTime
  quoteTaxable Float
  quoteAmount  Float
  workStatus   String
  approval     String
  poStatus     Boolean  @default(false)
  poNumber     String
  jcrStatus    Boolean  @default(false)
  agentName    String
  ticketId     String?
  ticket       Ticket?  @relation(name: "TicketToWorkStage")

  @@unique([ticketId])
}
