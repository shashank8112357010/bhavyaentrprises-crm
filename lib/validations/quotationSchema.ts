// lib/validations/quotationSchema.ts
import { z } from "zod";

// Define a schema for each item in the quotation
// This should match the structure used in NewQuotationPage's quotationItems
const quotationItemSchema = z.object({
  sno: z.number(),
  // Assuming rateCard itself is an object with description, unit, rate etc.
  // If rateCardId is stored, then it would be z.string().uuid()
  // For now, let's assume the structure from NewQuotationPage is mostly stored.
  // This needs to align with what `NewQuotationPage` sends.
  // For simplicity, let's expect a structure that includes necessary details for recalculation and display.
  description: z.string(),
  productDescription: z.string().optional(), // from RateCard object
  unit: z.string(),
  quantity: z.number().min(1),
  unitPrice: z.number(), // rate or unitPrice from RateCard
  totalValue: z.number(),
  rateCardId: z.string().optional(), // If linking back to an existing rate card
  // Add other fields from QuotationItem interface in NewQuotationPage if needed
});

export const quotationSchema = z.object({
  // name: z.string().min(1), // This is 'description' or 'work details' in the form
  name: z.string().min(1, "Work details are required"), // Represents the main description of the quotation
  clientId: z.string().uuid("Invalid client ID"),

  items: z.array(quotationItemSchema).min(1, "At least one item is required"),

  ticketId: z.string().uuid("Invalid ticket ID").optional(),

  // Fields from quotationForm in NewQuotationPage
  serialNumber: z.string().optional(), // This might be the internal QUOTXX or another number
  date: z.string().refine((val) => !isNaN(Date.parse(val)), { message: "Invalid date" }),
  salesType: z.string().min(1, "Sales type is required"),
  // quotationNumber: z.string().min(1, "Quote number is required"), // This will be generated by backend
  validUntil: z.string().optional().nullable(),
  admin: z.string().optional(), // Corresponds to 'admin' field in NewQuotationPage (if used)
  quoteBy: z.string().optional(), // Corresponds to 'quoteBy' field in NewQuotationPage (if used)

  // Financial fields from NewQuotationPage calculations
  subtotal: z.number(),
  discountPercentage: z.number().min(0).max(100).default(0), // Renamed from 'discount' string
  discountAmount: z.number().min(0).default(0),
  taxableValue: z.number(),
  igstAmount: z.number(), // Assuming this is the 'gst' amount calculated
  netGrossAmount: z.number(), // This is the final 'grandTotal'

  status: z.enum(["DRAFT", "SENT", "ACCEPTED", "REJECTED", "ARCHIVED"]).default("DRAFT"),
});

export type CreateQuotationPayload = z.infer<typeof quotationSchema>;
